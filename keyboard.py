# keyboard.py
import math
import base64
import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TRACKS_PER_PAGE, GROUP_TRACKS_PER_PAGE

def create_tracks_keyboard(tracks, page=0, search_id="", is_group=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤"""
    tracks_per_page = GROUP_TRACKS_PER_PAGE if is_group else TRACKS_PER_PAGE
    total_pages = math.ceil(len(tracks) / tracks_per_page)
    start_idx = page * tracks_per_page
    end_idx = min(start_idx + tracks_per_page, len(tracks))
    buttons = []
    for i in range(start_idx, end_idx):
        track = tracks[i]
        track_data = {
            "title": track['title'],
            "artist": track['channel'],
            "url": track['url'],
            "search_id": search_id,
            "source": track.get('source', '')
        }
        track_json = json.dumps(track_data, ensure_ascii=False)
        if len(track_json.encode('utf-8')) > 60:
            callback_data = f"dl_{i+1}_{search_id}"
        else:
            callback_data = f"d_{base64.b64encode(track_json.encode('utf-8')).decode('utf-8')}"
        duration = track.get('duration', 0)
        if duration > 0:
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f" ({minutes}:{seconds:02d})"
        else:
            duration_str = ""
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_icon = "üî¥" if track.get('source') == 'youtube' else "üü†" if track.get('source') == 'soundcloud' else "üéµ"
        buttons.append([
            InlineKeyboardButton(
                text=f"{source_icon} {track['title']} - {track['channel']}{duration_str}",
                callback_data=callback_data
            )
        ])
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"page_{page-1}_{search_id}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page+1}/{total_pages}",
                callback_data="info"
            )
        )
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"page_{page+1}_{search_id}"
                )
            )
        buttons.append(nav_buttons)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def create_settings_keyboard(settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_buttons = []
    for source, label in [('auto', '–∞–≤—Ç–æ–≤—ã–±–æ—Ä'), ('youtube', 'youtube'), ('soundcloud', 'soundcloud')]:
        is_selected = settings.get('preferred_source') == source
        mark = "‚úÖ " if is_selected else ""
        source_buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{label}",
                callback_data=f"settings_source_{source}"
            )
        )
    buttons.append([InlineKeyboardButton(text="üéµ –∏—Å—Ç–æ—á–Ω–∏–∫ –º—É–∑—ã–∫–∏:", callback_data="info")])
    buttons.append(source_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_buttons = []
    for quality, label in [('low', '–Ω–∏–∑–∫–æ–µ'), ('medium', '—Å—Ä–µ–¥–Ω–µ–µ'), ('high', '–≤—ã—Å–æ–∫–æ–µ')]:
        is_selected = settings.get('audio_quality') == quality
        mark = "‚úÖ " if is_selected else ""
        quality_buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{label}",
                callback_data=f"settings_quality_{quality}"
            )
        )
    buttons.append([InlineKeyboardButton(text="üîä –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ:", callback_data="info")])
    buttons.append(quality_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    format_buttons = []
    for format_type, label in [('single', '–ø–æ –æ–¥–Ω–æ–º—É'), ('group', '–≥—Ä—É–ø–ø–æ–π'), ('archive', '–∞—Ä—Ö–∏–≤–æ–º')]:
        is_selected = settings.get('media_format') == format_type
        mark = "‚úÖ " if is_selected else ""
        format_buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{label}",
                callback_data=f"settings_format_{format_type}"
            )
        )
    buttons.append([InlineKeyboardButton(text="üì¶ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", callback_data="info")])
    buttons.append(format_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
    lyrics_buttons = []
    for lyrics, label in [('true', '–≤–∫–ª—é—á–µ–Ω'), ('false', '–≤—ã–∫–ª—é—á–µ–Ω')]:
        is_selected = settings.get('auto_lyrics') == (lyrics == 'true')
        mark = "‚úÖ " if is_selected else ""
        lyrics_buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{label}",
                callback_data=f"settings_lyrics_{lyrics}"
            )
        )
    buttons.append([InlineKeyboardButton(text="üìù –∞–≤—Ç–æ–ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤:", callback_data="info")])
    buttons.append(lyrics_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –Ω–∞–∑–∞–¥",
            callback_data="back_to_start"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons) 