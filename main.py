import os
import requests
import ssl
import json
import tempfile
import base64
import asyncio
import time
import uuid
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from vkpymusic import Service
from mutagen.id3 import ID3, TIT2, TPE1, APIC
from mutagen.mp3 import MP3
import math
from collections import defaultdict


load_dotenv()


bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
session = requests.Session()
session.request = lambda method, url, **kwargs: requests.Session.request(
    session, method, url, timeout=60, **kwargs  # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç —Å 30 –¥–æ 60 —Å–µ–∫—É–Ω–¥
)

TRACKS_PER_PAGE = 10
MAX_TRACKS = 150
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

download_tasks = defaultdict(dict)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –ø–æ–∏—Å–∫–∞
search_results = {}

# –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
def init_service_with_retry():
    retries = 0
    last_error = None
    
    while retries < MAX_RETRIES:
        try:
            service = Service.parse_config()
            service.session = session
            return service
        except (requests.exceptions.Timeout, ssl.SSLError, ConnectionError) as e:
            retries += 1
            last_error = e
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retries}/{MAX_RETRIES}): {str(e)}")
            time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
    try:
        vk_token = os.getenv('VK_TOKEN')
        if vk_token:
            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
            service = Service(user_agent, vk_token)
            service.session = session
            return service
    except Exception as e:
        last_error = e
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    raise Exception(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ vk –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {str(last_error)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    vk_token = os.getenv('VK_TOKEN')
    if vk_token:
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º VK —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
        service = Service(user_agent, vk_token)
        service.session = session
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        service.session.headers.update({
            'User-Agent': user_agent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://vk.com/',
            'Origin': 'https://vk.com',
            'Sec-Ch-Ua': '"Chromium";v="125", "Google Chrome";v="125", "Not.A/Brand";v="24"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"'
        })
    else:
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥")
        service = init_service_with_retry()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
    raise Exception("—Ç–æ–∫–µ–Ω vk –Ω–µ –Ω–∞–π–¥–µ–Ω. —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ get_token.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è VK_TOKEN.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID3 —Ç–µ–≥–æ–≤ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö) MP3 —Ñ–∞–π–ª–∞
def set_mp3_metadata(file_path, title, artist):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
        try:
            audio = ID3(file_path)
        except:
            # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
            audio = ID3()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        audio["TIT2"] = TIT2(encoding=3, text=title)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        audio["TPE1"] = TPE1(encoding=3, text=artist)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª
        audio.save(file_path)
        return True
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç—Ä–µ–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def create_tracks_keyboard(tracks, page=0, search_id=""):
    # –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(tracks) / TRACKS_PER_PAGE)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TRACKS_PER_PAGE
    end_idx = min(start_idx + TRACKS_PER_PAGE, len(tracks))
    
    # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        track = tracks[i]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
        track_data = {
            "title": track.title,
            "artist": track.artist,
            "url": track.url,
            "search_id": search_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–∏—Å–∫–∞ –∫ –¥–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–∞
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON, –∑–∞—Ç–µ–º –≤ Base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
        track_json = json.dumps(track_data, ensure_ascii=False)
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä callback_data –≤ Telegram - 64 –±–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if len(track_json.encode('utf-8')) > 60:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å –∏ ID –ø–æ–∏—Å–∫–∞
            callback_data = f"dl_{i+1}_{search_id}"
        else:
            callback_data = f"d_{base64.b64encode(track_json.encode('utf-8')).decode('utf-8')}"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üéß {track.title} - {track.artist}",
                callback_data=callback_data
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"page_{page-1}_{search_id}"
                )
            )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page+1}/{total_pages}",
                callback_data="info"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"page_{page+1}_{search_id}"
                )
            )
        
        buttons.append(nav_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def download_track(user_id, track_data, callback_message, status_message):
    temp_path = None
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏
    animation_task = asyncio.create_task(animate_loading_dots(status_message, track_data["title"], track_data["artist"]))
    
    try:
        title = track_data["title"]
        artist = track_data["artist"]
        url = track_data["url"]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        retry_count = 0
        download_success = False
        
        while retry_count < MAX_RETRIES and not download_success:
            try:
                if retry_count > 0:
                    # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
                    pass
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
                    'Referer': 'https://vk.com/',
                    'Origin': 'https://vk.com',
                    'Accept': '*/*',
                    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'
                }
                
                response = await asyncio.to_thread(
                    lambda: requests.get(url, headers=headers, timeout=60)
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                if response.status_code != 200:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                content_type = response.headers.get('Content-Type', '')
                if 'audio' not in content_type and 'application/octet-stream' not in content_type:
                    if len(response.content) < 10000:  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        raise Exception("–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–∫")
                
                with open(temp_path, 'wb') as f:
                    f.write(response.content)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ MP3
                file_size = os.path.getsize(temp_path)
                if file_size < 10000:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
                    raise Exception("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é")
                
                download_success = True
            except (requests.exceptions.Timeout, ssl.SSLError, ConnectionError) as e:
                retry_count += 1
                if retry_count >= MAX_RETRIES:
                    raise
                await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ MP3 —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        await asyncio.to_thread(
            lambda: set_mp3_metadata(temp_path, title, artist)
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_task.cancel()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ —á–∞—Ç (–±–µ–∑ caption)
        audio = FSInputFile(temp_path, filename=f"{artist} - {title}.mp3")
        await callback_message.answer_audio(
            audio=audio,
            title=title,
            performer=artist
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await status_message.delete()
        
    except Exception as e:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_task.cancel()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ VK
        error_str = str(e)
        if "–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in error_str.lower() or "—Å–ª–∏—à–∫–æ–º –º–∞–ª" in error_str.lower():
            await status_message.edit_text(f"‚ùå –≠—Ç–æ—Ç —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–π—Ç–µ vk.com –∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.")
        else:
            # –í —Å–ª—É—á–∞–µ –æ–±—ã—á–Ω–æ–π –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await status_message.edit_text(f"‚ùå –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: {error_str}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_path:
            try:
                os.unlink(temp_path)
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if user_id in download_tasks and id(asyncio.current_task()) in download_tasks[user_id]:
            del download_tasks[user_id][id(asyncio.current_task())]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
async def animate_loading_dots(message, title, artist, interval=0.5):
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –¥–≤–∏–∂—É—â–µ–π—Å—è —Ç–æ—á–∫–æ–π ‚óè
    animations = ["‚óè \u2009 \u2009 \u2009", " \u2009‚óè \u2009 \u2009", " \u2009 \u2009‚óè \u2009", " \u2009 \u2009 \u2009‚óè", " \u2009 \u2009‚óè \u2009", " \u2009‚óè \u2009 \u2009"]
    idx = 0
    
    try:
        while True:
            await message.edit_text(f"‚è≥ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title} - {artist} {animations[idx]}")
            idx = (idx + 1) % len(animations)
            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        # –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        pass
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§† –ø—Ä–∏–≤–µ—Ç\n"
        "—ç—Ç–æ —á–∏—Å—Ç—ã–π –Ω–µ –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω\n"
        "—Ç—ã —É–∂–µ –∑–Ω–∞–µ—â—å –∫–∞–∫ –∏—Å–∫–∞—Ç—å –ø–æ—ç—Ç–æ–º—É –Ω–µ –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å –ª–∏—à–Ω–µ–≥–æ"
    )

@dp.message(Command("downloads"))
async def cmd_downloads(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in download_tasks or not download_tasks[user_id]:
        await message.answer("—É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
        return
    
    downloads_count = len(download_tasks[user_id])
    await message.answer(f"—É —Ç–µ–±—è {downloads_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")

@dp.message()
async def search_music(message: types.Message):
    try:
        loading_msg = await message.answer("üîç –∏—â—É —Ç—Ä–µ–∫–∏...")
        
        query = message.text
        
        try:
            # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            tracks = None
            retry_count = 0
            
            while retry_count < MAX_RETRIES and tracks is None:
                try:
                    if retry_count > 0:
                        await loading_msg.edit_text(f"üîç –∏—â—É —Ç—Ä–µ–∫–∏... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count+1})")
                    
                    tracks = service.search_songs_by_text(query, count=MAX_TRACKS)
                except (requests.exceptions.Timeout, ssl.SSLError, ConnectionError) as e:
                    retry_count += 1
                    if retry_count >= MAX_RETRIES:
                        raise
                    await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
        except (requests.exceptions.Timeout, ssl.SSLError, ConnectionError) as e:
            await loading_msg.edit_text("‚è±Ô∏è –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å vk, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π vpn")
            return
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ SSL handshake timeout
            error_str = str(e)
            if "_ssl.c:989: The handshake operation timed out" in error_str:
                await loading_msg.edit_text("—Ç–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞–µ—Ç—Å—è\n–ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∂–∞–ª—É—Å—Ç–∞")
            else:
                await loading_msg.edit_text(f"‚ùå –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {error_str}")
            return
        
        if not tracks:
            await loading_msg.edit_text("üòî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
            return
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ url
        valid_tracks = [track for track in tracks if hasattr(track, 'url') and track.url]
        
        if not valid_tracks:
            await loading_msg.edit_text("üòî –Ω–∞—à–ª–∏—Å—å —Ç—Ä–µ–∫–∏, –Ω–æ –æ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
            return
            
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
        search_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
        search_results[search_id] = {
            "tracks": valid_tracks,
            "query": query,
            "user_id": message.from_user.id
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–∫–∞–º–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = create_tracks_keyboard(valid_tracks, page=0, search_id=search_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        response = f"üéµ –Ω–∞—à–ª–æ—Å—å —Ç—Ä–µ–∫–æ–≤: {len(valid_tracks)}"
        
        await loading_msg.edit_text(response, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(f"‚ùå —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")

@dp.callback_query(F.data.startswith("page_"))
async def handle_page_navigation(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ ID –ø–æ–∏—Å–∫–∞ –∏–∑ callback_data
        parts = callback.data.split("_")
        page = int(parts[1])
        search_id = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –∫—ç—à–∞ –ø–æ ID –ø–æ–∏—Å–∫–∞
        if search_id not in search_results:
            await callback.answer("‚ùå –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–∞—Ö —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if search_results[search_id]["user_id"] != callback.from_user.id:
            await callback.answer("‚ùå —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return
        
        tracks = search_results[search_id]["tracks"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = create_tracks_keyboard(tracks, page=page, search_id=search_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        response = f"üéµ –Ω–∞—à–ª–∏—Å—å —Ç—Ä–µ–∫–∏:"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data == "info")
async def handle_info_button(callback: types.CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await callback.answer("—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ / –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü")

@dp.callback_query(F.data.startswith("d_"))
async def download_track_by_data(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("‚è≥ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–∑ callback_data
        encoded_data = callback.data[2:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "d_"
        track_data = json.loads(base64.b64decode(encoded_data).decode('utf-8'))
        
        title = track_data["title"]
        artist = track_data["artist"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ search_id –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
        if "search_id" in track_data and track_data["search_id"] not in search_results:
            await callback.message.answer("‚ùå –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        status_message = await callback.message.answer(f"‚è≥ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title} - {artist}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
        task = asyncio.create_task(
            download_track(user_id, track_data, callback.message, status_message)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        download_tasks[user_id][id(task)] = task
        
    except Exception as e:
        await callback.message.answer(f"‚ùå —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")

@dp.callback_query(F.data.startswith("dl_"))
async def download_track_by_index(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("‚è≥ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        track_index = int(parts[1]) - 1
        search_id = parts[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∏—Å–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫–∏ –≤ –∫—ç—à–µ –ø–æ ID –ø–æ–∏—Å–∫–∞
        if search_id not in search_results:
            await callback.message.answer("‚ùå –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if search_results[search_id]["user_id"] != user_id:
            await callback.answer("‚ùå —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return
        
        tracks = search_results[search_id]["tracks"]
        
        if track_index < 0 or track_index >= len(tracks):
            await callback.message.answer("‚ùå —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Ç—Ä–µ–∫–∞, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            return
        
        track = tracks[track_index]
        title = track.title
        artist = track.artist
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        track_data = {
            "title": title,
            "artist": artist,
            "url": track.url,
            "search_id": search_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        status_message = await callback.message.answer(f"‚è≥ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title} - {artist}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
        task = asyncio.create_task(
            download_track(user_id, track_data, callback.message, status_message)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        download_tasks[user_id][id(task)] = task
        
    except Exception as e:
        await callback.message.answer(f"‚ùå —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 