import os
import asyncio
import tempfile
import json
import base64
import math
import re
from collections import defaultdict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from mutagen.id3 import ID3, TIT2, TPE1, APIC
from mutagen.mp3 import MP3
import yt_dlp
import uuid
import time
import subprocess
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRACKS_PER_PAGE = 10
MAX_TRACKS = 150
MAX_RETRIES = 3
MIN_SONG_DURATION = 45  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_SONG_DURATION = 720 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (12 –º–∏–Ω—É—Ç)
URL_REGEX = r'(https?://\S+)'

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
download_tasks = defaultdict(dict)
search_results = {}
download_queues = defaultdict(list)  # –û—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_modes = defaultdict(lambda: 'audio')
MAX_PARALLEL_DOWNLOADS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
ydl_opts = {
    'format': 'bestaudio/best',
    'quiet': True,
    'no_warnings': True,
    'extract_flat': True,
    'prefer_ffmpeg': True,
    'nocheckcertificate': True,
    'ignoreerrors': True,
    'ffmpeg_location': '/usr/bin/ffmpeg',
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ ---
def get_mode_keyboard(current_mode: str) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    if current_mode == 'audio':
        builder.button(text="üìπ –†–µ–∂–∏–º –í–∏–¥–µ–æ")
    else:
        builder.button(text="üéµ –†–µ–∂–∏–º –ê—É–¥–∏–æ")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ ---
@dp.message((F.text == "üìπ –†–µ–∂–∏–º –í–∏–¥–µ–æ") | (F.text == "üéµ –†–µ–∂–∏–º –ê—É–¥–∏–æ"))
async def switch_mode(message: types.Message):
    user_id = message.from_user.id
    if message.text == "üìπ –†–µ–∂–∏–º –í–∏–¥–µ–æ":
        user_modes[user_id] = 'video'
        new_mode = 'video'
        response_text = "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –í–∏–¥–µ–æ. –¢–µ–ø–µ—Ä—å –±—É–¥—É –∏—Å–∫–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ (MP4)."
    else:
        user_modes[user_id] = 'audio'
        new_mode = 'audio'
        response_text = "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –ê—É–¥–∏–æ. –¢–µ–ø–µ—Ä—å –±—É–¥—É –∏—Å–∫–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ (MP3)."
    await message.answer(response_text, reply_markup=get_mode_keyboard(new_mode))

def extract_title_and_artist(title):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    prefixes = ['Official Video', 'Official Music Video', 'Official Audio', 'Lyric Video', 'Lyrics']
    for prefix in prefixes:
        if title.lower().endswith(f" - {prefix.lower()}"):
            title = title[:-len(prefix)-3]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    separators = [' - ', ' ‚Äî ', ' ‚Äì ', ' | ', ' ~ ']
    for sep in separators:
        if sep in title:
            parts = title.split(sep)
            if len(parts) == 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                if len(parts[0]) > len(parts[1]):
                    return parts[0].strip(), parts[1].strip()
                else:
                    return parts[1].strip(), parts[0].strip()
    
    # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    if len(title) > 30:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        return title, "Unknown Artist"
    elif any(char in title for char in ['(', '[', '{']):  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        return title, "Unknown Artist"
    else:
        return title, "Unknown Artist"

async def search_youtube(query, max_results=50, mode='audio'):
    try:
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        search_opts = {
            **ydl_opts, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            'default_search': 'ytsearch',
            'max_downloads': max_results,
            'extract_flat': True, # –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        }
        
        with yt_dlp.YoutubeDL(search_opts) as ydl:
            info = ydl.extract_info(f"ytsearch{max_results}:{query}", download=False)
            if not info or 'entries' not in info:
                return []
            
            results = []
            for entry in info['entries']:
                if entry:
                    duration = entry.get('duration', 0)
                    # Filter by duration ONLY for audio mode
                    if mode == 'audio' and (not duration or not (MIN_SONG_DURATION <= duration <= MAX_SONG_DURATION)):
                        continue # Skip if duration is missing or outside the range for audio
                        
                    title, artist = extract_title_and_artist(entry.get('title', 'Unknown Title'))
                    if artist == "Unknown Artist":
                        artist = entry.get('uploader', 'Unknown Artist')
                    results.append({
                        'title': title,
                        'channel': artist,
                        'url': entry.get('url', ''),
                        'duration': entry.get('duration', 0),
                        'thumbnail': entry.get('thumbnail') # <--- –î–æ–±–∞–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–∫–∏
                    })
            return results
    except Exception as e:
        print(f"An error occurred during search: {e}")
        return []

def create_tracks_keyboard(tracks, page=0, search_id="", mode='audio'):
    total_pages = math.ceil(len(tracks) / TRACKS_PER_PAGE)
    start_idx = page * TRACKS_PER_PAGE
    end_idx = min(start_idx + TRACKS_PER_PAGE, len(tracks))
    
    buttons = []
    
    for i in range(start_idx, end_idx):
        track = tracks[i]
        track_data = {
            "title": track['title'],
            "artist": track['channel'],
            "url": track['url'],
            "search_id": search_id,
            "mode": mode, # <--- –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º
            "thumbnail": track.get('thumbnail') # <--- –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–ª–æ–∂–∫—É
        }
        
        track_json = json.dumps(track_data, ensure_ascii=False)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π –∫–æ–ª–±–µ–∫ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        # (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å, —Ç.–∫. –¥–æ–±–∞–≤–∏–ª–∏—Å—å mode –∏ thumbnail)
        if len(track_json.encode('utf-8')) > 55:
            callback_data = f"dl_{i+1}_{search_id}"
        else:
            callback_data = f"d_{base64.b64encode(track_json.encode('utf-8')).decode('utf-8')}"
        
        duration = track.get('duration', 0)
        if duration > 0:
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f" ({minutes}:{seconds:02d})"
        else:
            duration_str = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ä–µ–∂–∏–º–∞
        icon = "üé¨" if mode == 'video' else "üéß"

        buttons.append([
            InlineKeyboardButton(
                text=f"{icon} {track['title']} - {track['channel']}{duration_str}",
                callback_data=callback_data
            )
        ])
    
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"page_{page-1}_{search_id}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page+1}/{total_pages}",
                callback_data="info"
            )
        )
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"page_{page+1}_{search_id}"
                )
            )
        buttons.append(nav_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def process_download_queue(user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while download_queues[user_id] and len(download_tasks[user_id]) < MAX_PARALLEL_DOWNLOADS:
        track_data, callback_message = download_queues[user_id].pop(0)
        # Slightly informal status message
        status_message = await callback_message.answer(f"‚è≥ —Å—Ç–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {track_data['title']} - {track_data['channel']}\n...") 
        task = asyncio.create_task(
            download_track(user_id, track_data, callback_message, status_message)
        )
        download_tasks[user_id][track_data["url"]] = task

def _blocking_download_and_convert(url, download_opts):
    """Helper function to run blocking yt-dlp download/conversion."""
    with yt_dlp.YoutubeDL(download_opts) as ydl:
        # Check info first (optional, but good practice)
        info = ydl.extract_info(url, download=False)
        if not info:
            raise Exception("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –æ –≤–∏–¥–µ–æ (–≤ executor)")
        # Perform the download and conversion
        ydl.download([url])

async def download_track(user_id, track_data, callback_message, status_message):
    temp_path = None
    final_extension = '.mp3' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    loop = asyncio.get_running_loop()
    mode = track_data.get('mode', 'audio') # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    thumbnail_url = track_data.get('thumbnail') # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É

    try:
        title = track_data["title"]
        artist = track_data["channel"]
        url = track_data["url"]
        
        # --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ ---
        safe_title = "".join(c if c.isalnum() or c in ('.', '_', '-') else '_' for c in title).strip('_').strip('.').strip('-')
        safe_title = safe_title[:100] 
        if not safe_title:
             safe_title = f"media_{uuid.uuid4()}"
        temp_dir = tempfile.gettempdir()
        base_temp_path = os.path.join(temp_dir, safe_title) # e.g., /tmp/Media_Title
        
        # --- –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º ---
        print(f"Cleaning potential old files for base: {base_temp_path}")
        for ext in ['.mp3', '.mp4', '.mkv', '.webm', '.m4a', '.opus', '.ogg', '.aac', '.part']:
            potential_path = f"{base_temp_path}{ext}"
            if os.path.exists(potential_path):
                try:
                    os.remove(potential_path)
                    print(f"Removed existing file: {potential_path}")
                except OSError as e:
                    print(f"Warning: Could not remove existing file {potential_path}: {e}")
        
        # --- –û–ø—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
        download_opts = {
            # –û–±—â–∏–µ –æ–ø—Ü–∏–∏
            'verbose': True,
            'quiet': False,
            'no_warnings': False,
            'prefer_ffmpeg': True,
            'nocheckcertificate': True,
            'ignoreerrors': False, # –í–∞–∂–Ω–æ: False, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            'extract_flat': False, 
            'ffmpeg_location': '/usr/bin/ffmpeg',
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
            'format': '',
            'postprocessors': [],
            'outtmpl': ''
        }

        if mode == 'audio':
            print("Setting options for AUDIO download")
            download_opts['format'] = 'bestaudio[ext=m4a]/bestaudio/best'
            download_opts['postprocessors'].append({
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            })
            download_opts['outtmpl'] = base_temp_path + '.%(ext)s'
            final_extension = '.mp3'
        elif mode == 'video':
            print("Setting options for VIDEO download")
            # –°–∫–∞—á–∏–≤–∞–µ–º –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ —Å –ª—É—á—à–∏–º –∞—É–¥–∏–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ MP4
            # Prefer mp4 directly if available
            download_opts['format'] = 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best'
            download_opts['postprocessors'].append({
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4', # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ MP4
            })
            download_opts['outtmpl'] = base_temp_path + '.%(ext)s'
            # –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ, ytdl –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .mkv –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥ postprocessing
            # –ü–æ—ç—Ç–æ–º—É –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å .mp4 (–ø–æ—Å–ª–µ postprocessing) –∏–ª–∏ .mkv (–µ—Å–ª–∏ postprocessing –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            final_extension = '.mp4' # –û–∂–∏–¥–∞–µ–º MP4 –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        else:
             raise ValueError(f"Unknown download mode: {mode}")

        expected_final_path = base_temp_path + final_extension

        try:
            await bot.edit_message_text(
                f"‚è≥ –∫–∞—á–∞—é {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫'}: {title} - {artist}...",
                chat_id=callback_message.chat.id,
                message_id=status_message.message_id
            )
            
            print(f"\nStarting download ({mode.upper()}) for: {title} - {artist}")
            print(f"URL: {url}")
            print(f"Output template: {download_opts['outtmpl']}")
            print(f"Expected final path: {expected_final_path}")
            print(f"Using download options: {download_opts}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            await loop.run_in_executor(
                None, 
                _blocking_download_and_convert,
                url,
                download_opts 
            )
            
            print(f"Finished blocking download call for: {title} - {artist}")

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è --- 
            if not os.path.exists(expected_final_path):
                print(f"ERROR: Expected final file NOT FOUND at {expected_final_path} after download attempt.")
                # –î–ª—è –≤–∏–¥–µ–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Å—Ç–∞–ª—Å—è –ª–∏ MKV (–µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4 –Ω–µ —É–¥–∞–ª–∞—Å—å)
                potential_mkv_path = base_temp_path + '.mkv'
                if mode == 'video' and os.path.exists(potential_mkv_path):
                     print(f"Warning: Found MKV file {potential_mkv_path} instead of expected MP4. Using MKV.")
                     expected_final_path = potential_mkv_path # –ò—Å–ø–æ–ª—å–∑—É–µ–º MKV
                     final_extension = '.mkv'
                else:
                     # –ü—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
                     intermediate_extensions = ['.m4a', '.webm', '.opus', '.ogg', '.aac']
                     found_other = False
                     for ext in intermediate_extensions:
                         potential_path = f"{base_temp_path}{ext}"
                         if os.path.exists(potential_path):
                             print(f"Warning: Found intermediate file {potential_path}. Conversion likely failed.")
                             found_other = True
                             try: os.remove(potential_path) 
                             except OSError as e: print(f"Could not remove intermediate file {potential_path}: {e}")
                             break
                     raise Exception(f"—Ñ–∞–π–ª {expected_final_path} –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            
            temp_path = expected_final_path 
            print(f"Confirmed final file exists at: {temp_path}")
            
            if os.path.getsize(temp_path) == 0:
                print(f"ERROR: Downloaded file {temp_path} is empty.")
                raise Exception("—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")
            
            print(f"File size: {os.path.getsize(temp_path)} bytes")

            # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–£–î–ò–û --- 
            if mode == 'audio':
                try:
                    print(f"Validating MP3 structure for {temp_path}...")
                    audio_check = MP3(temp_path) 
                    if not audio_check.info.length > 0:
                        print(f"ERROR: MP3 file {temp_path} loaded but has zero length/duration.")
                        raise Exception("—Ñ–∞–π–ª MP3 —Å–∫–∞—á–∞–ª—Å—è, –Ω–æ –ø–æ—Ö–æ–∂–µ –±–∏—Ç—ã–π (–Ω—É–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞)")
                    print(f"MP3 Validation PASSED for {temp_path}, duration: {audio_check.info.length}s")
                except Exception as validation_error:
                    print(f"ERROR: MP3 Validation FAILED for {temp_path}: {validation_error}")
                    raise Exception(f"—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º MP3: {validation_error}")
                
                print(f"Setting metadata for {temp_path}...")
                if not set_mp3_metadata(temp_path, title, artist):
                     print(f"ERROR: Failed to set metadata for {temp_path}.")
                     raise Exception(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {title} - {artist}")
                print(f"Metadata set successfully for {temp_path}.")
            
            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ --- 
            print(f"Preparing to send {temp_path} (Mode: {mode.upper()}).")
            await bot.delete_message(
                chat_id=callback_message.chat.id,
                message_id=status_message.message_id
            )
            sending_message = await callback_message.answer(f"üì§ –æ—Ç–ø—Ä–∞–≤–ª—è—é {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫'}...") 
            print(f"Sending {mode} {temp_path}...")

            if mode == 'audio':
                await bot.send_audio(
                    chat_id=callback_message.chat.id,
                    audio=FSInputFile(temp_path),
                    title=title,
                    performer=artist
                )
            elif mode == 'video':
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è –≤–∏–¥–µ–æ
                thumbnail_path = None
                if thumbnail_url:
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.get(thumbnail_url) as resp:
                                if resp.status == 200:
                                    thumb_temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
                                    thumb_temp_file.write(await resp.read())
                                    thumbnail_path = thumb_temp_file.name
                                    thumb_temp_file.close()
                                    print(f"Thumbnail downloaded to {thumbnail_path}")
                    except Exception as thumb_e:
                        print(f"Warning: Failed to download thumbnail {thumbnail_url}: {thumb_e}")

                await bot.send_video(
                    chat_id=callback_message.chat.id,
                    video=FSInputFile(temp_path),
                    caption=f"{title} - {artist}",
                    thumbnail=FSInputFile(thumbnail_path) if thumbnail_path else None,
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å duration, width, height –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ info –∏ –Ω—É–∂–Ω—ã
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                if thumbnail_path and os.path.exists(thumbnail_path):
                     try:
                         os.remove(thumbnail_path)
                         print(f"Removed temporary thumbnail file: {thumbnail_path}")
                     except OSError as e:
                         print(f"Warning: Could not remove thumbnail file {thumbnail_path}: {e}")

            print(f"{mode.capitalize()} sent successfully. Deleting sending message.")
            await bot.delete_message(
                chat_id=callback_message.chat.id,
                message_id=sending_message.message_id
            )
            print(f"Finished processing {mode}: {title} - {artist}")

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏
            print(f"ERROR during download/processing for {title} - {artist}: {e}")
            error_text = f"‚ùå –±–ª–∏–Ω, –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
            if len(error_text) > 4000: error_text = error_text[:4000] + "..."
            try: await bot.edit_message_text(chat_id=callback_message.chat.id, message_id=status_message.message_id, text=error_text)
            except Exception as edit_error: print(f"Failed to edit message for error: {edit_error}")
            try: await callback_message.answer(error_text)
            except Exception as send_error: print(f"Failed to send new message for error: {send_error}")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (mp3/mp4/mkv)
        if temp_path and os.path.exists(temp_path):
            try:
                print(f"Cleaning up temporary file: {temp_path}")
                os.remove(temp_path)
            except Exception as remove_error:
                print(f"Warning: Failed to remove temp file {temp_path}: {remove_error}")
        else:
            print(f"No temporary file found at {temp_path} to clean up, or path is None.")
        
        # Clean up task tracking and check queue
        if user_id in download_tasks:
            # Use get to avoid KeyError if URL was already removed (e.g., by cancel)
            if download_tasks[user_id].pop(track_data["url"], None):
                 print(f"Removed task entry for URL: {track_data['url']}")
            else:
                 print(f"Task entry for URL {track_data['url']} not found or already removed.")
            # Remove user entry if no tasks left
            if not download_tasks[user_id]:
                print(f"No tasks left for user {user_id}, removing user entry.")
                del download_tasks[user_id]
            else:
                 print(f"{len(download_tasks[user_id])} tasks remaining for user {user_id}.")
            # Check queue regardless of success/failure of current task
            if user_id in download_queues and download_queues[user_id]: 
                print(f"Processing next item in queue for user {user_id}.")
                await process_download_queue(user_id)
            else:
                 print(f"Download queue for user {user_id} is empty or user not found.")

def set_mp3_metadata(file_path, title, artist):
    try:
        try:
            audio = ID3(file_path)
        except:
            audio = ID3()
        
        audio["TIT2"] = TIT2(encoding=3, text=title)
        audio["TPE1"] = TPE1(encoding=3, text=artist)
        audio.save(file_path)
        return True
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    current_mode = user_modes[user_id]
    await message.answer(
        "üëã –ø—Ä–∏–≤–µ—Ç–∏–∫–∏! —è –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –≤–∏–¥–µ–æ\n\n" 
        "üîç –∫–∏–¥–∞–π –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=get_mode_keyboard(current_mode)
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    current_mode = user_modes[user_id]
    help_text = (
        f"üéµ *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* {'–ê—É–¥–∏–æ (MP3)' if current_mode == 'audio' else '–í–∏–¥–µ–æ (MP4)'}\n\n"
        "*–∫–∞–∫ —Ç—É—Ç –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:*"
        "1Ô∏è‚É£ –ö–∏–¥–∞–µ—à—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞/–≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É (YouTube –∏ –¥—Ä.)\n"
        "2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å –Ω—É–∂–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –∏—Å–∫–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)\n"
        "3Ô∏è‚É£ –ñ–º–µ—à—å –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å\n"
        "4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ê—É–¥–∏–æ/–í–∏–¥–µ–æ\n\n"
        "‚öôÔ∏è *–∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —á—Ç–æ:*"
        "/start - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/help - –≤–æ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search [–∑–∞–ø—Ä–æ—Å] - –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É/–≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"
    )
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_mode_keyboard(current_mode))

@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–ª–µ /search, –ø–ª–∏–∑.\n–Ω–∞–ø—Ä–∏–º–µ—Ä: /search coldplay yellow")
        return
    
    query = " ".join(message.text.split()[1:])
    await message.answer("üîç –∏—â—É —Ç—Ä–µ–∫–∏...")
    
    search_id = str(uuid.uuid4())
    tracks = await search_youtube(query, MAX_TRACKS)
    
    if not tracks:
        await message.answer("‚ùå —á–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å?")
        return
    
    search_results[search_id] = tracks
    keyboard = create_tracks_keyboard(tracks, 0, search_id)
    
    await message.answer(
        f"üéµ –Ω–∞—à–µ–ª –≤–æ—Ç {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
        reply_markup=keyboard
    )

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    user_id = message.from_user.id
    current_mode = user_modes[user_id]
    if user_id in download_tasks and any(not task.done() for task in download_tasks[user_id].values()):
        active_tasks = [task for task in download_tasks[user_id].values() if not task.done()]
        for task in active_tasks:
            task.cancel()
        # Give tasks a moment to cancel
        await asyncio.sleep(0.1) 
        # Clear only cancelled/finished tasks or the entire user entry if empty
        download_tasks[user_id] = {url: task for url, task in download_tasks[user_id].items() if not task.cancelled() and not task.done()}
        if not download_tasks[user_id]:
            del download_tasks[user_id]
        
        # Also clear the queue for this user
        if user_id in download_queues:
            download_queues[user_id].clear()
            
        await message.answer("‚úÖ –æ–∫, –æ—Ç–º–µ–Ω–∏–ª –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å.", reply_markup=get_mode_keyboard(current_mode))
    else:
        await message.answer("‚ùå —Ç–∞–∫ —â–∞—Å –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –∫–∞—á–∞–µ—Ç—Å—è –≤—Ä–æ–¥–µ...", reply_markup=get_mode_keyboard(current_mode))

@dp.callback_query(F.data.startswith("d_"))
async def process_download_callback(callback: types.CallbackQuery):
    try:
        track_data_json = base64.b64decode(callback.data[2:]).decode('utf-8')
        track_data = json.loads(track_data_json)
        user_id = callback.from_user.id
        mode = track_data.get('mode', 'audio') # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º
        
        # Check if already downloading this specific track
        if track_data["url"] in download_tasks.get(user_id, {}):
            await callback.answer(f"–≠—Ç–æ—Ç {'–≤–∏–¥–µ–æ' if mode=='video' else '—Ç—Ä–µ–∫'} —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
            return
            
        # Check queue as well
        if any(item[0]['url'] == track_data['url'] for item in download_queues.get(user_id, [])):
             await callback.answer(f"–≠—Ç–æ—Ç {'–≤–∏–¥–µ–æ' if mode=='video' else '—Ç—Ä–µ–∫'} —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
             return
             
        active_downloads = sum(1 for task in download_tasks.get(user_id, {}).values() if not task.done())
        queue_size = len(download_queues.get(user_id, []))

        if active_downloads >= MAX_PARALLEL_DOWNLOADS:
            download_queues[user_id].append((track_data, callback.message))
            await callback.answer(
                f"‚è≥ –î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π). –ö–∞—á–∞—é {active_downloads}/{MAX_PARALLEL_DOWNLOADS}"
            )
        else:
            status_message = await callback.message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫'}: {track_data['title']} - {track_data['channel']}") 
            task = asyncio.create_task(
                download_track(user_id, track_data, callback.message, status_message)
            )
            download_tasks[user_id][track_data["url"]] = task
            await callback.answer(f"–ù–∞—á–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫–∞'}") # Acknowledge callback
            
    except json.JSONDecodeError:
         await callback.message.answer("‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞.")
         await callback.answer()
    except Exception as e:
        print(f"Error in process_download_callback: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()

@dp.callback_query(F.data.startswith("dl_"))
async def process_download_callback_with_index(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        track_index = int(parts[1]) - 1
        search_id = parts[2]
        
        if search_id not in search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞–π–¥–∏ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        
        tracks = search_results[search_id]
        if 0 <= track_index < len(tracks):
            # –ü–æ–ª—É—á–∞–µ–º track_data –∏–∑ –∫–µ—à–∞, –æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å mode –∏ thumbnail
            track_data = tracks[track_index]
            user_id = callback.from_user.id
            mode = track_data.get('mode', 'audio') # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º

            # Check if already downloading this specific track
            if track_data["url"] in download_tasks.get(user_id, {}):
                await callback.answer(f"–≠—Ç–æ—Ç {'–≤–∏–¥–µ–æ' if mode=='video' else '—Ç—Ä–µ–∫'} —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
                return
                
            # Check queue as well
            if any(item[0]['url'] == track_data['url'] for item in download_queues.get(user_id, [])):
                 await callback.answer(f"–≠—Ç–æ—Ç {'–≤–∏–¥–µ–æ' if mode=='video' else '—Ç—Ä–µ–∫'} —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
                 return

            active_downloads = sum(1 for task in download_tasks.get(user_id, {}).values() if not task.done())
            queue_size = len(download_queues.get(user_id, []))

            if active_downloads >= MAX_PARALLEL_DOWNLOADS:
                download_queues[user_id].append((track_data, callback.message))
                await callback.answer(
                    f"‚è≥ –î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π). –ö–∞—á–∞—é {active_downloads}/{MAX_PARALLEL_DOWNLOADS}"
                )
            else:
                status_message = await callback.message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫'}: {track_data['title']} - {track_data['channel']}")
                task = asyncio.create_task(
                    download_track(user_id, track_data, callback.message, status_message)
                )
                download_tasks[user_id][track_data["url"]] = task
                await callback.answer(f"–ù–∞—á–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫–∞'}") # Acknowledge callback
        else:
            await callback.answer("‚ùå –ù–µ –Ω–∞—à–µ–ª —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–º—É –∏–Ω–¥–µ–∫—Å—É.", show_alert=True)
            
    except (IndexError, ValueError):
         await callback.answer("‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", show_alert=True)
    except Exception as e:
        print(f"Error in process_download_callback_with_index: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.callback_query(F.data.startswith("page_"))
async def process_page_callback(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        page = int(parts[1])
        search_id = parts[2]
        
        if search_id not in search_results:
            await callback.answer("‚ùå –≠—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∏—â–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        tracks = search_results[search_id]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ–≥–æ –ø–æ–∏—Å–∫–∞)
        mode = tracks[0].get('mode', 'audio') if tracks else 'audio' 
        keyboard = create_tracks_keyboard(tracks, page, search_id, mode=mode)
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer() # Simple ack for page turn
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
    except Exception as e:
        print(f"Error in process_page_callback: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏: {str(e)}", show_alert=True)
        
@dp.callback_query(F.data == "info")
async def process_info_callback(callback: types.CallbackQuery):
    # Simple ack for the info button (page number)
    await callback.answer()

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---
@dp.message()
async def handle_text(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —è–≤–Ω–æ
    if message.text.startswith('/'):
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        # await message.answer("—Ö–º, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ø–æ–ø—Ä–æ–±—É–π /help")
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    if message.text in ["üìπ –†–µ–∂–∏–º –í–∏–¥–µ–æ", "üéµ –†–µ–∂–∏–º –ê—É–¥–∏–æ"]:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ switch_mode —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        return

    user_id = message.from_user.id
    current_mode = user_modes[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
    url_match = re.search(URL_REGEX, message.text)
    if url_match:
        url = url_match.group(1)
        await process_direct_url(url, user_id, message, current_mode)
    else:
        # –ï—Å–ª–∏ –Ω–µ URL, —Å—á–∏—Ç–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        query = message.text
        await message.answer(f"üîç –∏—â—É {'–≤–∏–¥–µ–æ' if current_mode == 'video' else '–∞—É–¥–∏–æ'} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...") 
        
        search_id = str(uuid.uuid4())
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
        tracks = await search_youtube(query, MAX_TRACKS, mode=current_mode)
        
        if not tracks:
            await message.answer(f"‚ùå –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª ({{'–≤–∏–¥–µ–æ' if current_mode == 'video' else '–∞—É–¥–∏–æ'}}). –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑?", reply_markup=get_mode_keyboard(current_mode))
            return
        
        search_results[search_id] = tracks
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = create_tracks_keyboard(tracks, 0, search_id, mode=current_mode)
        
        await message.answer(
            f"üéµ –Ω–∞—à–µ–ª –≤–æ—Ç {len(tracks)} {'–≤–∏–¥–µ–æ' if current_mode == 'video' else '—Ç—Ä–µ–∫–æ–≤'} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
            reply_markup=keyboard
        )

# --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ ---
async def process_direct_url(url: str, user_id: int, message: types.Message, mode: str):
    await message.answer(f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ {'–≤–∏–¥–µ–æ' if mode == 'video' else '–∞—É–¥–∏–æ'}...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Å—ã–ª–∫–µ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        info_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False, # –ù–∞–º –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
            'skip_download': True, # –ù–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
            'nocheckcertificate': True,
            'ignoreerrors': True,
            'ffmpeg_location': '/usr/bin/ffmpeg'
        }
        with yt_dlp.YoutubeDL(info_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            if not info:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.", reply_markup=get_mode_keyboard(mode))
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏–æ —Ä–µ–∂–∏–º–∞
        duration = info.get('duration', 0)
        if mode == 'audio' and not (MIN_SONG_DURATION <= duration <= MAX_SONG_DURATION):
             await message.answer(f"‚ùå –¢—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ –∏–º–µ–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({MIN_SONG_DURATION}-{MAX_SONG_DURATION} —Å–µ–∫) –¥–ª—è –∞—É–¥–∏–æ —Ä–µ–∂–∏–º–∞.", reply_markup=get_mode_keyboard(mode))
             return

        # –§–æ—Ä–º–∏—Ä—É–µ–º track_data –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        title, artist = extract_title_and_artist(info.get('title', 'Unknown Title'))
        if artist == "Unknown Artist":
            artist = info.get('uploader', 'Unknown Artist')
            
        track_data = {
            'title': title,
            'artist': artist, # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            'url': info.get('webpage_url', url), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            'mode': mode, # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º
            'thumbnail': info.get('thumbnail') # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        }

        # –õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ —Å—Ç–∞—Ä—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–ª–±–µ–∫–∞–º)
        if track_data["url"] in download_tasks.get(user_id, {}):
            await message.answer("–≠—Ç–æ—Ç —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", reply_markup=get_mode_keyboard(mode))
            return
        if any(item[0]['url'] == track_data['url'] for item in download_queues.get(user_id, [])):
             await message.answer("–≠—Ç–æ—Ç —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", reply_markup=get_mode_keyboard(mode))
             return

        active_downloads = sum(1 for task in download_tasks.get(user_id, {}).values() if not task.done())
        queue_size = len(download_queues.get(user_id, []))

        if active_downloads >= MAX_PARALLEL_DOWNLOADS:
            download_queues[user_id].append((track_data, message))
            await message.answer(
                f"‚è≥ –î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π). –ö–∞—á–∞—é {active_downloads}/{MAX_PARALLEL_DOWNLOADS}",
                reply_markup=get_mode_keyboard(mode)
            )
        else:
            status_message = await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å {'–≤–∏–¥–µ–æ' if mode == 'video' else '—Ç—Ä–µ–∫'}: {track_data['title']} - {track_data['artist']}")
            task = asyncio.create_task(
                download_track(user_id, track_data, message, status_message)
            )
            download_tasks[user_id][track_data["url"]] = task
            # –ù–µ –Ω—É–∂–Ω–æ await callback.answer() –∑–¥–µ—Å—å
            
    except Exception as e:
        print(f"Error processing direct URL {url}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}", reply_markup=get_mode_keyboard(mode))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 