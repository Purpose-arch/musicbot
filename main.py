import os
import asyncio
import tempfile
import json
import base64
import math
from collections import defaultdict, OrderedDict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from mutagen.id3 import ID3, TIT2, TPE1, APIC
from mutagen.mp3 import MP3
import yt_dlp
import uuid
import time
import subprocess

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRACKS_PER_PAGE = 10
MAX_TRACKS = 150
MAX_RETRIES = 3
MIN_SONG_DURATION = 45  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_SONG_DURATION = 720 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (12 –º–∏–Ω—É—Ç)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
download_tasks = defaultdict(dict)
search_results = {}
download_queues = defaultdict(list)  # –û—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_PARALLEL_DOWNLOADS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫

# –î–æ–±–∞–≤–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
download_status_messages = defaultdict(dict) # user_id -> {download_url: message_object}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
ydl_opts = {
    # Prioritize m4a, then best audio, then best overall
    'format': 'bestaudio[ext=m4a]/bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'quiet': True,
    'no_warnings': True,
    'extract_flat': True,
    'prefer_ffmpeg': True,
    'nocheckcertificate': True,
    'ignoreerrors': True,
    # Note: 'audioformat', 'audioquality', 'extractaudio', 'keepvideo'
    # are implicitly handled by the postprocessor or are download-specific.
    # 'outtmpl' is better handled dynamically in download_track.
    'ffmpeg_location': '/usr/bin/ffmpeg',
}

def extract_title_and_artist(title):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    prefixes = ['Official Video', 'Official Music Video', 'Official Audio', 'Lyric Video', 'Lyrics']
    for prefix in prefixes:
        if title.lower().endswith(f" - {prefix.lower()}"):
            title = title[:-len(prefix)-3]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    separators = [' - ', ' ‚Äî ', ' ‚Äì ', ' | ', ' ~ ']
    for sep in separators:
        if sep in title:
            parts = title.split(sep)
            if len(parts) == 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                if len(parts[0]) > len(parts[1]):
                    return parts[0].strip(), parts[1].strip()
                else:
                    return parts[1].strip(), parts[0].strip()
    
    # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    if len(title) > 30:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        return title, "Unknown Artist"
    elif any(char in title for char in ['(', '[', '{']):  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        return title, "Unknown Artist"
    else:
        return title, "Unknown Artist"

async def search_youtube(query, max_results=50):
    try:
        search_opts = {
            **ydl_opts,
            'default_search': 'ytsearch',
            'max_downloads': max_results,
            'extract_flat': True,
        }
        
        with yt_dlp.YoutubeDL(search_opts) as ydl:
            info = ydl.extract_info(f"ytsearch{max_results}:{query}", download=False)
            if not info or 'entries' not in info:
                return []
            
            results = []
            for entry in info['entries']:
                if entry:
                    duration = entry.get('duration', 0)
                    # Filter by duration
                    if not duration or not (MIN_SONG_DURATION <= duration <= MAX_SONG_DURATION):
                        continue # Skip if duration is missing or outside the range
                        
                    title, artist = extract_title_and_artist(entry.get('title', 'Unknown Title'))
                    # –ï—Å–ª–∏ artist –æ—Å—Ç–∞–ª—Å—è Unknown Artist, –∏—Å–ø–æ–ª—å–∑—É–µ–º uploader
                    if artist == "Unknown Artist":
                        artist = entry.get('uploader', 'Unknown Artist')
                    results.append({
                        'title': title,
                        'channel': artist,
                        'url': entry.get('url', ''),
                        'duration': entry.get('duration', 0)
                    })
            return results
    except Exception as e:
        print(f"An error occurred during search: {e}")
        return []

def create_tracks_keyboard(tracks, page=0, search_id=""):
    total_pages = math.ceil(len(tracks) / TRACKS_PER_PAGE)
    start_idx = page * TRACKS_PER_PAGE
    end_idx = min(start_idx + TRACKS_PER_PAGE, len(tracks))
    
    buttons = []
    
    for i in range(start_idx, end_idx):
        track = tracks[i]
        track_data = {
            "title": track['title'],
            "artist": track['channel'],
            "url": track['url'],
            "search_id": search_id
        }
        
        track_json = json.dumps(track_data, ensure_ascii=False)
        if len(track_json.encode('utf-8')) > 60:
            callback_data = f"dl_{i+1}_{search_id}"
        else:
            callback_data = f"d_{base64.b64encode(track_json.encode('utf-8')).decode('utf-8')}"
        
        duration = track.get('duration', 0)
        if duration > 0:
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f" ({minutes}:{seconds:02d})"
        else:
            duration_str = ""
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üéß {track['title']} - {track['channel']}{duration_str}",
                callback_data=callback_data
            )
        ])
    
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"page_{page-1}_{search_id}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page+1}/{total_pages}",
                callback_data="info"
            )
        )
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"page_{page+1}_{search_id}"
                )
            )
        buttons.append(nav_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã --- 
def create_cancel_markup(download_url: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏."""
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_dl_{download_url}")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
# --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def process_download_queue(user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while download_queues[user_id] and len(download_tasks.get(user_id, {})) < MAX_PARALLEL_DOWNLOADS:
        track_data, original_message = download_queues[user_id].pop(0)
        download_url = track_data['url']
        
        # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã --- 
        try:
            status_message = await original_message.answer(
                f"‚è≥ —Å—Ç–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {track_data['title']} - {track_data['channel']} ({len(download_queues.get(user_id, []))} –≤ –æ—á–µ—Ä–µ–¥–∏)",
                reply_markup=create_cancel_markup(download_url) # <-- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            )
            download_status_messages[user_id][download_url] = status_message # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            task = asyncio.create_task(
                download_track(user_id, track_data, status_message) # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            )
            download_tasks[user_id][download_url] = task
        except TelegramBadRequest as e:
             print(f"Failed to send status message (maybe deleted?): {e}")
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç—Ä–µ–∫
             continue 
        except Exception as e:
            print(f"Error creating download task from queue: {e}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            if user_id in download_status_messages and download_url in download_status_messages[user_id]:
                del download_status_messages[user_id][download_url]
            continue

def _blocking_download_and_convert(url, download_opts):
    """Helper function to run blocking yt-dlp download/conversion."""
    with yt_dlp.YoutubeDL(download_opts) as ydl:
        # Check info first (optional, but good practice)
        info = ydl.extract_info(url, download=False)
        if not info:
            raise Exception("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –æ –≤–∏–¥–µ–æ (–≤ executor)")
        # Perform the download and conversion
        ydl.download([url])

async def download_track(user_id, track_data, status_message):
    # --- –ò–∑–º–µ–Ω–µ–Ω–æ: status_message –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç --- 
    temp_path = None
    loop = asyncio.get_running_loop()
    download_url = track_data["url"] 
    
    try:
        title = track_data["title"]
        artist = track_data["channel"]
        url = track_data["url"]
        
        # –°–æ–∑–¥–∞–µ–º –ë–û–õ–ï–ï –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ _, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤/—Ü–∏—Ñ—Ä/./_/- 
        safe_title = "".join(c if c.isalnum() or c in ('.', '_', '-') else '_' for c in title).strip('_').strip('.').strip('-')
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        safe_title = safe_title[:100] 
        if not safe_title:
             safe_title = f"audio_{uuid.uuid4()}" # Fallback name

        temp_dir = tempfile.gettempdir() # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å /tmp –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        base_temp_path = os.path.join(temp_dir, safe_title) # e.g., /tmp/Ya_uebyvayu_v_dzhaz
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        # –í–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –î–û –≤—ã–∑–æ–≤–∞ ydl.download
        for ext in ['.mp3', '.m4a', '.webm', '.mp4', '.opus', '.ogg', '.aac', '.part']:
            potential_path = f"{base_temp_path}{ext}"
            if os.path.exists(potential_path):
                try:
                    os.remove(potential_path)
                    print(f"Removed existing file: {potential_path}")
                except OSError as e:
                    print(f"Warning: Could not remove existing file {potential_path}: {e}")
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º ydl_opts –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        download_opts = {
            'format': 'bestaudio[ext=m4a]/bestaudio/best', # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º m4a –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            # –í–ê–ñ–ù–û: outtmpl –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .%(ext)s 
            # —á—Ç–æ–±—ã ytdl —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–º—è –¥–æ –∏ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            'outtmpl': base_temp_path + '.%(ext)s', 
            'quiet': False, # –û—Ç–∫–ª—é—á–∞–µ–º quiet
            'verbose': True, # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'no_warnings': False,
            'prefer_ffmpeg': True,
            'nocheckcertificate': True,
            'ignoreerrors': True, # –û—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            'extract_flat': False, # –ù—É–∂–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            'ffmpeg_location': '/usr/bin/ffmpeg' # –û—Å—Ç–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏
        }
        
        expected_mp3_path = base_temp_path + '.mp3'

        try:
             # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ --- 
            await bot.edit_message_text(
                f"‚è≥ –∫–∞—á–∞—é —Ç—Ä–µ–∫: {track_data['title']} - {track_data['channel']}...",
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
                reply_markup=create_cancel_markup(download_url) # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            )
            
            print(f"\nStarting download for: {title} - {artist}")
            print(f"URL: {url}")
            print(f"Output template: {download_opts['outtmpl']}")
            print(f"Expected MP3 path: {expected_mp3_path}")
            print(f"Using download options: {download_opts}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é –∑–∞–≥—Ä—É–∑–∫—É/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await loop.run_in_executor(
                None, 
                _blocking_download_and_convert,
                url,
                download_opts 
            )
            
            print(f"Finished blocking download call for: {title} - {artist}")

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è --- 
            if not os.path.exists(expected_mp3_path):
                print(f"ERROR: Expected MP3 file NOT FOUND at {expected_mp3_path} after download attempt.")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Å—Ç–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏?)
                found_other = False
                for ext in ['.m4a', '.webm', '.opus', '.ogg', '.aac']:
                     potential_path = f"{base_temp_path}{ext}"
                     if os.path.exists(potential_path):
                         print(f"Warning: Found intermediate file {potential_path} instead of MP3. Conversion likely failed.")
                         found_other = True
                         # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª
                         try: 
                             os.remove(potential_path)
                         except OSError as e:
                             print(f"Could not remove intermediate file {potential_path}: {e}")
                         break
                raise Exception(f"—Ñ–∞–π–ª {expected_mp3_path} –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            
            temp_path = expected_mp3_path 
            print(f"Confirmed MP3 file exists at: {temp_path}")
            
            if os.path.getsize(temp_path) == 0:
                print(f"ERROR: Downloaded file {temp_path} is empty.")
                raise Exception("—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, —á–µ—Ç –Ω–µ —Ç–æ")
            
            print(f"File size: {os.path.getsize(temp_path)} bytes")

            # --- NEW: Validate MP3 file structure ---
            try:
                print(f"Validating MP3 structure for {temp_path}...")
                audio_check = MP3(temp_path) 
                if not audio_check.info.length > 0:
                     print(f"ERROR: MP3 file {temp_path} loaded but has zero length/duration.")
                     raise Exception("—Ñ–∞–π–ª MP3 —Å–∫–∞—á–∞–ª—Å—è, –Ω–æ –ø–æ—Ö–æ–∂–µ –±–∏—Ç—ã–π (–Ω—É–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞)")
                print(f"MP3 Validation PASSED for {temp_path}, duration: {audio_check.info.length}s")
            except Exception as validation_error:
                print(f"ERROR: MP3 Validation FAILED for {temp_path}: {validation_error}")
                raise Exception(f"—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º MP3: {validation_error}")

            # --- Metadata and Sending ---
            print(f"Setting metadata for {temp_path}...")
            if set_mp3_metadata(temp_path, title, artist):
                print(f"Metadata set successfully. Preparing to send {temp_path}.")
                try:
                    await bot.delete_message(
                        chat_id=status_message.chat.id,
                        message_id=status_message.message_id
                    )
                    if user_id in download_status_messages and download_url in download_status_messages[user_id]:
                        del download_status_messages[user_id][download_url] # –£–±–∏—Ä–∞–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                except TelegramBadRequest:
                    print("Status message already deleted?") 
                except Exception as del_err:
                     print(f"Error deleting status message: {del_err}")

                sending_message = await status_message.reply("üì§ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–∫...") # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –¥–ª—è —Å–≤—è–∑–∏
                print(f"Sending audio {temp_path}...")
                await bot.send_audio(
                    chat_id=status_message.chat.id,
                    audio=FSInputFile(temp_path),
                    title=title,
                    performer=artist
                )
                print(f"Audio sent successfully. Deleting sending message.")
                await bot.delete_message(
                    chat_id=sending_message.chat.id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ sending_message
                    message_id=sending_message.message_id
                )
                print(f"Finished processing track: {title} - {artist}")
            else:
                print(f"ERROR: Failed to set metadata for {temp_path}.")
                raise Exception(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {title} - {artist}")

        except asyncio.CancelledError:
             print(f"Download task for {title} - {artist} ({download_url}) was cancelled.")
             # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ --- 
             try:
                 await bot.edit_message_text(
                     f"üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {track_data['title']} - {track_data['channel']}",
                     chat_id=status_message.chat.id,
                     message_id=status_message.message_id,
                     reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
                 )
             except TelegramBadRequest:
                 print("Status message already deleted during cancel?")
             except Exception as edit_err:
                 print(f"Error editing message on cancel: {edit_err}")
             # –ù–µ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º CancelledError, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É

        except Exception as e:
            print(f"ERROR during download/processing for {title} - {artist}: {e}")
            # Catch errors from download, file checks, or metadata setting
            error_text = f"‚ùå –±–ª–∏–Ω, –æ—à–∏–±–∫–∞: {str(e)}"
            if len(error_text) > 4000: 
                error_text = error_text[:4000] + "..."
            try:
                await bot.edit_message_text(
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                    text=error_text,
                    reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
                )
            except Exception as edit_error:
                print(f"Failed to edit message for error: {edit_error}")
                try:
                    await status_message.reply(error_text)
                except Exception as send_error:
                    print(f"Failed to send new message for error: {send_error}")

    finally:
        if temp_path and os.path.exists(temp_path):
            try:
                print(f"Cleaning up temporary file: {temp_path}")
                os.remove(temp_path)
            except Exception as remove_error:
                print(f"Warning: Failed to remove temp file {temp_path}: {remove_error}")
        else:
            print(f"No temporary file found at {temp_path} to clean up, or path is None.")
        
        # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ --- 
        if user_id in download_tasks:
            download_tasks[user_id].pop(download_url, None)
            if not download_tasks[user_id]:
                del download_tasks[user_id]
        # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Ç–∞–º
        if user_id in download_status_messages:
            download_status_messages[user_id].pop(download_url, None)
            if not download_status_messages[user_id]:
                del download_status_messages[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ 
        # (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ /cancel) 
        # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å–∞–º–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CancelledError –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π –≤–Ω—É—Ç—Ä–∏ finally, 
        # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—á–µ—Ä–µ–¥–∏.
        if user_id in download_queues and download_queues[user_id]:
             print(f"Processing next item in queue for user {user_id} after task completion/error.")
             await process_download_queue(user_id)

def set_mp3_metadata(file_path, title, artist):
    try:
        try:
            audio = ID3(file_path)
        except:
            audio = ID3()
        
        audio["TIT2"] = TIT2(encoding=3, text=title)
        audio["TPE1"] = TPE1(encoding=3, text=artist)
        audio.save(file_path)
        return True
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ø—Ä–∏–≤–µ—Ç–∏–∫–∏! —è –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏\n\n"
        "üîç –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üéµ *–∫–∞–∫ —Ç—É—Ç –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n\n"
        "1Ô∏è‚É£ –∫–∏–¥–∞–µ—à—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        "2Ô∏è‚É£ –≤—ã–±–∏—Ä–∞–µ—à—å –Ω—É–∂–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3Ô∏è‚É£ –∂–º–µ—à—å –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å\n\n"
        "üéµ *–∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —á—Ç–æ:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/help - –≤–æ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search [–∑–∞–ø—Ä–æ—Å] - –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∏–¥—É—Ç"
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    user_id = message.from_user.id
    cancelled_count = 0
    active_tasks = []

    # –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if user_id in download_tasks:
        active_tasks = [task for task in download_tasks[user_id].values() if not task.done()]
        for task in active_tasks:
            task.cancel()
            cancelled_count += 1
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–º–µ–Ω—É
        if active_tasks: 
            await asyncio.sleep(0.2)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É–¥–∞–ª—è—Ç—Å—è —Å–∞–º–∏ –≤ finally)
        # download_tasks[user_id] = {url: task for url, task in download_tasks[user_id].items() if not task.done()}
        # if not download_tasks[user_id]:
        #      del download_tasks[user_id]

    # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    queued_count = 0
    if user_id in download_queues:
        queued_count = len(download_queues[user_id])
        # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –ù—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ --- 
        for track_data, _ in download_queues[user_id]: # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ original_message
            download_url = track_data['url']
            if user_id in download_status_messages and download_url in download_status_messages[user_id]:
                status_message = download_status_messages[user_id].pop(download_url)
                try:
                    await bot.edit_message_text(
                        f"üö´ –£–±—Ä–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {track_data['title']} - {track_data['channel']}",
                        chat_id=status_message.chat.id,
                        message_id=status_message.message_id,
                        reply_markup=None
                    )
                except Exception as e:
                     print(f"Error editing queued message on /cancel: {e}")
            else: 
                print(f"Warning: Status message for queued item {download_url} not found during /cancel.")
        download_queues[user_id].clear()
        cancelled_count += queued_count

    # –û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π –¥–æ /cancel)
    if user_id in download_status_messages:
         # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –ø–µ—Ä–µ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
         urls_to_remove = list(download_status_messages[user_id].keys()) 
         for url in urls_to_remove:
             if url in download_status_messages[user_id]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, —Ç.–∫. –º–æ–≥–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –≤—ã—à–µ
                status_message = download_status_messages[user_id].pop(url)
                try:
                    await bot.delete_message(
                        chat_id=status_message.chat.id, 
                        message_id=status_message.message_id
                    )
                except Exception as e:
                    print(f"Error deleting remaining status message on /cancel: {e}")
         if not download_status_messages[user_id]:
             del download_status_messages[user_id]

    if cancelled_count > 0:
        await message.answer(f"‚úÖ –æ–∫, –æ—Ç–º–µ–Ω–∏–ª {cancelled_count} –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –ø–æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å.")
    else:
        await message.answer("‚ùå —Ç–∞–∫ —â–∞—Å –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç.")

@dp.callback_query(F.data.startswith("d_"))
async def process_download_callback(callback: types.CallbackQuery):
    try:
        track_data = json.loads(base64.b64decode(callback.data[2:]).decode('utf-8'))
        user_id = callback.from_user.id
        download_url = track_data['url']
        
        if download_url in download_tasks.get(user_id, {}) or \
           any(item[0]['url'] == download_url for item in download_queues.get(user_id, [])):
            await callback.answer("—ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
            return
            
        active_downloads = sum(1 for task in download_tasks.get(user_id, {}).values() if not task.done())
        queue_size = len(download_queues.get(user_id, []))

        if active_downloads >= MAX_PARALLEL_DOWNLOADS:
            download_queues[user_id].append((track_data, callback.message))
            # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å –∫–Ω–æ–ø–∫–æ–π --- 
            status_message = await callback.message.answer(
                 f"‚è≥ –¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π): {track_data['title']} - {track_data['channel']}",
                 reply_markup=create_cancel_markup(download_url)
            )
            download_status_messages[user_id][download_url] = status_message
            await callback.answer(f"–¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π)")
        else:
            # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π --- 
            status_message = await callback.message.answer(
                f"‚è≥ –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å: {track_data['title']} - {track_data['channel']}",
                reply_markup=create_cancel_markup(download_url)
            )
            download_status_messages[user_id][download_url] = status_message
            task = asyncio.create_task(
                download_track(user_id, track_data, status_message)
            )
            download_tasks[user_id][download_url] = task
            await callback.answer("–Ω–∞—á–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
            
    except json.JSONDecodeError:
         await callback.message.answer("‚ùå —á–µ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞. –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞.")
         await callback.answer()
    except Exception as e:
        print(f"Error in process_download_callback: {e}")
        await callback.message.answer(f"‚ùå –æ–π, –æ—à–∏–±–∫–∞: {str(e)}")
        await callback.answer() # Acknowledge callback in all cases, even errors

@dp.callback_query(F.data.startswith("dl_"))
async def process_download_callback_with_index(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        track_index = int(parts[1]) - 1
        search_id = parts[2]
        
        if search_id not in search_results:
            await callback.answer("‚ùå —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –Ω–∞–π–¥–∏ —Å–Ω–æ–≤–∞, –ø–ª–∑.", show_alert=True)
            return
        
        tracks = search_results[search_id]
        if 0 <= track_index < len(tracks):
            track_data = tracks[track_index]
            user_id = callback.from_user.id
            download_url = track_data['url']

            if download_url in download_tasks.get(user_id, {}) or \
               any(item[0]['url'] == download_url for item in download_queues.get(user_id, [])):
                await callback.answer("—ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
                return
                
            active_downloads = sum(1 for task in download_tasks.get(user_id, {}).values() if not task.done())
            queue_size = len(download_queues.get(user_id, []))

            if active_downloads >= MAX_PARALLEL_DOWNLOADS:
                download_queues[user_id].append((track_data, callback.message))
                # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å –∫–Ω–æ–ø–∫–æ–π --- 
                status_message = await callback.message.answer(
                     f"‚è≥ –¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π): {track_data['title']} - {track_data['channel']}",
                     reply_markup=create_cancel_markup(download_url)
                )
                download_status_messages[user_id][download_url] = status_message
                await callback.answer(f"–¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å ({queue_size+1}-–π)")
            else:
                # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π --- 
                status_message = await callback.message.answer(
                    f"‚è≥ –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å: {track_data['title']} - {track_data['channel']}",
                    reply_markup=create_cancel_markup(download_url)
                )
                download_status_messages[user_id][download_url] = status_message
                task = asyncio.create_task(
                    download_track(user_id, track_data, status_message)
                )
                download_tasks[user_id][download_url] = task
                await callback.answer("–Ω–∞—á–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
        else:
            await callback.answer("‚ùå –Ω–µ –Ω–∞—à–µ–ª —Ç—Ä–µ–∫ –ø–æ —ç—Ç–æ–º—É –∏–Ω–¥–µ–∫—Å—É.", show_alert=True)
            
    except IndexError:
         await callback.answer("‚ùå —á–µ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", show_alert=True)
    except Exception as e:
        print(f"Error in process_download_callback_with_index: {e}")
        await callback.answer(f"‚ùå –æ–π, –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.callback_query(F.data.startswith("page_"))
async def process_page_callback(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        page = int(parts[1])
        search_id = parts[2]
        
        if search_id not in search_results:
            await callback.answer("‚ùå —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É–∂–µ —Å—Ç–∞—Ä—ã–µ. –ø–æ–∏—â–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        tracks = search_results[search_id]
        keyboard = create_tracks_keyboard(tracks, page, search_id)
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer() # Simple ack for page turn
    except (IndexError, ValueError):
        await callback.answer("‚ùå —á–µ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
    except Exception as e:
        print(f"Error in process_page_callback: {e}")
        await callback.answer(f"‚ùå –±–ª–∏–Ω, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏: {str(e)}", show_alert=True)
        
@dp.callback_query(F.data == "info")
async def process_info_callback(callback: types.CallbackQuery):
    # Simple ack for the info button (page number)
    await callback.answer()

@dp.message()
async def handle_text(message: types.Message):
    # Ignore commands explicitly
    if message.text.startswith('/'):
        # Maybe add a hint for unknown commands?
        # await message.answer("—Ö–º, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ø–æ–ø—Ä–æ–±—É–π /help")
        return
    
    # Treat as search query
    query = message.text
    await message.answer("üîç –∏—â—É —Ç—Ä–µ–∫–∏...") 
    
    search_id = str(uuid.uuid4())
    tracks = await search_youtube(query, MAX_TRACKS)
    
    if not tracks:
        await message.answer("‚ùå –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑?")
        return
    
    search_results[search_id] = tracks
    keyboard = create_tracks_keyboard(tracks, 0, search_id)
    
    await message.answer(
        f"üéµ –Ω–∞—à–µ–ª –≤–æ—Ç {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
        reply_markup=keyboard
    )

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã --- 
@dp.callback_query(F.data.startswith("cancel_dl_"))
async def cancel_download_callback(callback: types.CallbackQuery):
    download_url = callback.data[len("cancel_dl_"):]
    user_id = callback.from_user.id
    cancelled = False
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
    if user_id in download_tasks and download_url in download_tasks[user_id]:
        task = download_tasks[user_id][download_url]
        if not task.done():
            task.cancel()
            cancelled = True
            print(f"Cancelled active task via button: {download_url}")
            # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ finally –±–ª–æ–∫–∞ download_track
            await callback.answer("–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
             # –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å (—É—Å–ø–µ—à–Ω–æ/–æ—à–∏–±–∫–∞)
             await callback.answer("—ç—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
             # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
             if user_id in download_status_messages and download_url in download_status_messages[user_id]:
                 status_message = download_status_messages[user_id].pop(download_url)
                 try:
                      await bot.edit_message_reply_markup(chat_id=status_message.chat.id, 
                                                          message_id=status_message.message_id, 
                                                          reply_markup=None)
                 except Exception as e:
                      print(f"Error removing markup from completed task message: {e}")
             return # –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
        original_queue_len = len(download_queues.get(user_id, []))
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å, —É–¥–∞–ª—è—è –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        download_queues[user_id] = [item for item in download_queues.get(user_id, []) if item[0]['url'] != download_url]
        
        if len(download_queues.get(user_id, [])) < original_queue_len:
            cancelled = True
            print(f"Removed from queue via button: {download_url}")
            # –ù–∞—Ö–æ–¥–∏–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if user_id in download_status_messages and download_url in download_status_messages[user_id]:
                status_message = download_status_messages[user_id].pop(download_url)
                try:
                    track_title = "—Ç—Ä–µ–∫" # –î–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º
                    # –ù–∞–π–¥–µ–º title –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏ –±–µ–∑ –Ω–µ–≥–æ)
                    # –≠—Ç–æ –¥–æ—Ä–æ–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —É–±—Ä–∞—Ç—å
                    # original_data = next((item[0] for item in download_queues.get(user_id, []) if item[0]['url'] == download_url), None)
                    # if original_data: track_title = original_data.get('title', '—Ç—Ä–µ–∫')
                        
                    await bot.edit_message_text(
                        f"üö´ –£–±—Ä–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {status_message.text.split(': ')[1]}", # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        chat_id=status_message.chat.id,
                        message_id=status_message.message_id,
                        reply_markup=None
                    )
                    await callback.answer("—É–±—Ä–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                except Exception as e:
                    print(f"Error editing queued message on cancel: {e}")
                    await callback.answer("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è") # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            else:
                 print(f"Status message for cancelled queue item {download_url} not found.")
                 await callback.answer("—É–±—Ä–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)") # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ, –Ω–æ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    if not cancelled:
        print(f"Cancel button pressed for {download_url}, but task/queue item not found.")
        await callback.answer("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã", show_alert=True)
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if user_id in download_status_messages and download_url in download_status_messages[user_id]:
             status_message = download_status_messages[user_id].pop(download_url)
             try:
                  await bot.edit_message_reply_markup(chat_id=status_message.chat.id, 
                                                      message_id=status_message.message_id, 
                                                      reply_markup=None)
             except Exception as e:
                  print(f"Error removing markup from lost task message: {e}")
# --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ --- 

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 