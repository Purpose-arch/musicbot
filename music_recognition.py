import tempfile
import logging
import asyncio
import os
from typing import Optional, Dict, Any
from shazamio import Shazam
from PyLyrics import PyLyrics
import lyricwikia
from musicxmatch_api import MusixMatchAPI
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import lyricsgenius
import chartlyrics
from yandex_music import Client as YandexMusicClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShazamIO –∏ MusicXMatch
shazam = Shazam()
musicxmatch = MusixMatchAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Genius API —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
genius_token = os.getenv("GENIUS_TOKEN", "")  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ .env
genius = lyricsgenius.Genius(genius_token) if genius_token else None
if genius:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Genius API
    genius.verbose = False  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
    genius.remove_section_headers = True  # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ ([Chorus], [Verse] –∏ —Ç.–¥.)
    genius.skip_non_songs = True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex Music –∫–ª–∏–µ–Ω—Ç
yandex_token = os.getenv("YANDEX_MUSIC_TOKEN", "")  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ .env
yandex_client = YandexMusicClient(yandex_token).init() if yandex_token else None

async def search_pylyrics(artist: str, track: str) -> Optional[str]:
    try:
        return await asyncio.to_thread(PyLyrics.getLyrics, artist, track)
    except Exception as e:
        logging.error(f"PyLyrics error for {artist} - {track}: {e}")
        return None

async def search_lyricwikia(artist: str, track: str) -> Optional[str]:
    try:
        return await asyncio.to_thread(lyricwikia.get_lyrics, artist, track)
    except Exception as e:
        logging.error(f"LyricWikia error for {artist} - {track}: {e}")
        return None

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ MusicXMatch
async def search_musicxmatch(artist: str, track: str) -> Optional[str]:
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç—Ä–µ–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        search_result = await asyncio.to_thread(musicxmatch.search_tracks, f"{track} {artist}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if search_result and search_result.get("message", {}).get("body", {}).get("track_list"):
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
            first_track = search_result["message"]["body"]["track_list"][0]["track"]
            track_id = first_track["track_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –ø–æ ID —Ç—Ä–µ–∫–∞
            lyrics_result = await asyncio.to_thread(musicxmatch.get_track_lyrics, track_id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if lyrics_result and lyrics_result.get("message", {}).get("body", {}).get("lyrics"):
                lyrics = lyrics_result["message"]["body"]["lyrics"]["lyrics_body"]
                # MusicXMatch —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –∫–æ–ø–∏—Ä–∞–π—Ç –≤ –∫–æ–Ω–µ—Ü, —É–¥–∞–ª–∏–º –µ–≥–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                if "******* This Lyrics is NOT" in lyrics:
                    lyrics = lyrics.split("*******")[0].strip()
                return lyrics
        
        return None
    except Exception as e:
        logging.error(f"MusicXMatch error for {artist} - {track}: {e}")
        return None

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ Genius
async def search_genius(artist: str, track: str) -> Optional[str]:
    if not genius or not genius_token:
        logging.warning("Genius API token not set, skipping Genius search")
        return None
    
    try:
        # –ò—â–µ–º –ø–µ—Å–Ω—é —á–µ—Ä–µ–∑ API Genius
        search_result = await asyncio.to_thread(genius.search_song, track, artist)
        if search_result:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
            lyrics = search_result.lyrics
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∞ 'x Contributor (—Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫) Lyrics' –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Ä—è–¥–∞
            lyrics = re.sub(r"^.*?\n\n", "", lyrics, count=1)
            # Genius –æ–±—ã—á–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ—é –º–µ—Ç–∫—É –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
            if lyrics.endswith("Embed"):
                lyrics = lyrics.rsplit("\n", 2)[0].strip()
            return lyrics
        return None
    except Exception as e:
        logging.error(f"Genius error for {artist} - {track}: {e}")
        return None

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ ChartLyrics (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def search_chartlyrics(artist: str, track: str) -> Optional[str]:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è chartlyrics
        search_result = await asyncio.to_thread(chartlyrics.search_lyrics, track, artist)
        if search_result and len(search_result) > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_match = search_result[0]
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
            if 'lyrics' in first_match and first_match['lyrics']:
                return first_match['lyrics']
        return None
    except Exception as e:
        logging.error(f"ChartLyrics error for {artist} - {track}: {e}")
        return None

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É
async def search_yandex_music(artist: str, track: str) -> Optional[str]:
    if not yandex_client or not yandex_token:
        logging.warning("Yandex Music token not set, skipping Yandex Music search")
        return None
    
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        search_result = await asyncio.to_thread(yandex_client.search, f"{track} {artist}", type_="track")
        if search_result and search_result.tracks and search_result.tracks.results:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
            best_track = search_result.tracks.results[0]
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç
            supplement = await asyncio.to_thread(best_track.get_supplement)
            if supplement and supplement.lyrics:
                return supplement.lyrics.full_lyrics
        return None
    except Exception as e:
        logging.error(f"Yandex Music error for {artist} - {track}: {e}")
        return None

# DEPRECATED: –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—É–∑—ã–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ handlers.py –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_media_recognition
# async def process_music(message, client, chat_id: int, message_id: int):
#     """
#     –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ ShazamIO,
#     –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
#     —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ expandable blockquote.
#     """
#     # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
#     with tempfile.TemporaryDirectory() as tmpdir:
#         path = await message.download_media(tmpdir)
#         if not path:
#             await client.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.", reply_to=message_id)
#             return
# 
#         # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#         progress_message = await client.send_message(chat_id, "üîé –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç—Ä–µ–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_to=message_id)
# 
#         try:
#             # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç—Ä–µ–∫
#             result = await shazam.recognize(path)
#             track_info = result.get("track", {})
#             title = track_info.get("title") or track_info.get("heading")
#             artist = track_info.get("subtitle")
#             if not title or not artist:
#                 # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
#                 await progress_message.edit(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫.")
#                 return
# 
#             # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏—â–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
#             lyrics_tasks = [
#                 search_yandex_music(artist, title),
#                 search_musicxmatch(artist, title),
#                 search_genius(artist, title),
#                 search_pylyrics(artist, title),
#                 search_chartlyrics(artist, title),
#                 search_lyricwikia(artist, title),
#             ]
#             # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
#             lyrics_results = await asyncio.gather(*lyrics_tasks)
# 
#             # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#             lyrics_text = None
#             for txt in lyrics_results:
#                 if txt:
#                     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
#                     lyrics_text = f"üé∂ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ '{title}' ‚Äî {artist}\n\n{txt}"
#                     break
# 
#             if not lyrics_text:
#                 lyrics_text = f"‚ùå –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ '{title}' ‚Äî {artist} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ."
# 
#             # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
#             await progress_message.edit(
#                 text=f"<blockquote expandable>{lyrics_text}</blockquote>",
#                 parse_mode="HTML"
#             )
# 
#         except Exception as e:
#             logging.error(f"Error in music recognition or lyrics fetching: {e}", exc_info=True)
#             # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
#             await progress_message.edit(
#                 text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}"
#             )
